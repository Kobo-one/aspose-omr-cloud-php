<?php
/*
Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.

Licensed under the MIT (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      https://github.com/aspose-omr-cloud/aspose-omr-cloud-php/blob/master/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



    Aspose.OMR for Cloud API Reference

    Aspose.OMR for Cloud helps performing optical mark recognition in the cloud

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
*/

/**
 * ServerStat
 *
 * PHP version 5
 *
 * @category Class
 * @package  Aspose\Omr
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Aspose\Omr\Model;

use \ArrayAccess;

/**
 * ServerStat Class Doc Comment
 *
 * @category    Class
 * @description Represents information about part of the text.
 * @package     Aspose\Omr
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ServerStat implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ServerStat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'storageDownloadTime' => 'string',
        'omrFunctionCallTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'storageDownloadTime' => 'time-span',
        'omrFunctionCallTime' => 'time-span'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'storageDownloadTime' => 'StorageDownloadTime',
        'omrFunctionCallTime' => 'OmrFunctionCallTime'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'storageDownloadTime' => 'setStorageDownloadTime',
        'omrFunctionCallTime' => 'setOmrFunctionCallTime'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'storageDownloadTime' => 'getStorageDownloadTime',
        'omrFunctionCallTime' => 'getOmrFunctionCallTime'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['storageDownloadTime'] = isset($data['storageDownloadTime']) ? $data['storageDownloadTime'] : null;
        $this->container['omrFunctionCallTime'] = isset($data['omrFunctionCallTime']) ? $data['omrFunctionCallTime'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['storageDownloadTime'] === null) {
            $invalid_properties[] = "'storageDownloadTime' can't be null";
        }
        if ($this->container['omrFunctionCallTime'] === null) {
            $invalid_properties[] = "'omrFunctionCallTime' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['storageDownloadTime'] === null) {
            return false;
        }
        if ($this->container['omrFunctionCallTime'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets storageDownloadTime
     * @return string
     */
    public function getStorageDownloadTime()
    {
        return $this->container['storageDownloadTime'];
    }

    /**
     * Sets storageDownloadTime
     * @param string $storageDownloadTime Get or set StorageDownloadTime
     * @return $this
     */
    public function setStorageDownloadTime($storageDownloadTime)
    {
        $this->container['storageDownloadTime'] = $storageDownloadTime;

        return $this;
    }

    /**
     * Gets omrFunctionCallTime
     * @return string
     */
    public function getOmrFunctionCallTime()
    {
        return $this->container['omrFunctionCallTime'];
    }

    /**
     * Sets omrFunctionCallTime
     * @param string $omrFunctionCallTime Get or set OmrFunctionCallTime
     * @return $this
     */
    public function setOmrFunctionCallTime($omrFunctionCallTime)
    {
        $this->container['omrFunctionCallTime'] = $omrFunctionCallTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Aspose\Omr\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Aspose\Omr\ObjectSerializer::sanitizeForSerialization($this));
    }
}


